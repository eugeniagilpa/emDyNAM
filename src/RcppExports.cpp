// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// timesTwo
NumericVector timesTwo(NumericVector& x);
RcppExport SEXP _emDyNAM_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// getpDoAugment
double getpDoAugment(NumericMatrix gammaEplus, double gammaPlus, double p, double m, NumericMatrix me, int sender, int receiver, std::string typeA, IntegerVector indexSR, double pAug);
RcppExport SEXP _emDyNAM_getpDoAugment(SEXP gammaEplusSEXP, SEXP gammaPlusSEXP, SEXP pSEXP, SEXP mSEXP, SEXP meSEXP, SEXP senderSEXP, SEXP receiverSEXP, SEXP typeASEXP, SEXP indexSRSEXP, SEXP pAugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type gammaEplus(gammaEplusSEXP);
    Rcpp::traits::input_parameter< double >::type gammaPlus(gammaPlusSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type me(meSEXP);
    Rcpp::traits::input_parameter< int >::type sender(senderSEXP);
    Rcpp::traits::input_parameter< int >::type receiver(receiverSEXP);
    Rcpp::traits::input_parameter< std::string >::type typeA(typeASEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type indexSR(indexSRSEXP);
    Rcpp::traits::input_parameter< double >::type pAug(pAugSEXP);
    rcpp_result_gen = Rcpp::wrap(getpDoAugment(gammaEplus, gammaPlus, p, m, me, sender, receiver, typeA, indexSR, pAug));
    return rcpp_result_gen;
END_RCPP
}
// getpDoShort
double getpDoShort(NumericMatrix gammaEminus, double gammaMinus, double p, double uniqueR, int sender, int receiver, std::string typeS, double pShort);
RcppExport SEXP _emDyNAM_getpDoShort(SEXP gammaEminusSEXP, SEXP gammaMinusSEXP, SEXP pSEXP, SEXP uniqueRSEXP, SEXP senderSEXP, SEXP receiverSEXP, SEXP typeSSEXP, SEXP pShortSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type gammaEminus(gammaEminusSEXP);
    Rcpp::traits::input_parameter< double >::type gammaMinus(gammaMinusSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type uniqueR(uniqueRSEXP);
    Rcpp::traits::input_parameter< int >::type sender(senderSEXP);
    Rcpp::traits::input_parameter< int >::type receiver(receiverSEXP);
    Rcpp::traits::input_parameter< std::string >::type typeS(typeSSEXP);
    Rcpp::traits::input_parameter< double >::type pShort(pShortSEXP);
    rcpp_result_gen = Rcpp::wrap(getpDoShort(gammaEminus, gammaMinus, p, uniqueR, sender, receiver, typeS, pShort));
    return rcpp_result_gen;
END_RCPP
}
// getpDoPerm
double getpDoPerm(NumericVector probVec, NumericVector probVec2, int e1, int e2, int sender1, int receiver1, int sender2, int receiver2, NumericMatrix me);
RcppExport SEXP _emDyNAM_getpDoPerm(SEXP probVecSEXP, SEXP probVec2SEXP, SEXP e1SEXP, SEXP e2SEXP, SEXP sender1SEXP, SEXP receiver1SEXP, SEXP sender2SEXP, SEXP receiver2SEXP, SEXP meSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type probVec(probVecSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type probVec2(probVec2SEXP);
    Rcpp::traits::input_parameter< int >::type e1(e1SEXP);
    Rcpp::traits::input_parameter< int >::type e2(e2SEXP);
    Rcpp::traits::input_parameter< int >::type sender1(sender1SEXP);
    Rcpp::traits::input_parameter< int >::type receiver1(receiver1SEXP);
    Rcpp::traits::input_parameter< int >::type sender2(sender2SEXP);
    Rcpp::traits::input_parameter< int >::type receiver2(receiver2SEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type me(meSEXP);
    rcpp_result_gen = Rcpp::wrap(getpDoPerm(probVec, probVec2, e1, e2, sender1, receiver1, sender2, receiver2, me));
    return rcpp_result_gen;
END_RCPP
}
// getKelMeMatrix
List getKelMeMatrix(DataFrame seq, IntegerVector actDfnodesLab);
RcppExport SEXP _emDyNAM_getKelMeMatrix(SEXP seqSEXP, SEXP actDfnodesLabSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type actDfnodesLab(actDfnodesLabSEXP);
    rcpp_result_gen = Rcpp::wrap(getKelMeMatrix(seq, actDfnodesLab));
    return rcpp_result_gen;
END_RCPP
}
// getAuxDfE
DataFrame getAuxDfE(List auxDf, int sender, int receiver);
RcppExport SEXP _emDyNAM_getAuxDfE(SEXP auxDfSEXP, SEXP senderSEXP, SEXP receiverSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type auxDf(auxDfSEXP);
    Rcpp::traits::input_parameter< int >::type sender(senderSEXP);
    Rcpp::traits::input_parameter< int >::type receiver(receiverSEXP);
    rcpp_result_gen = Rcpp::wrap(getAuxDfE(auxDf, sender, receiver));
    return rcpp_result_gen;
END_RCPP
}
// stepAugment
List stepAugment(DataFrame seq, CharacterVector tieNames, NumericMatrix gammaEplus, double gammaPlus, double m, NumericMatrix me, NumericMatrix net0, double pAug);
RcppExport SEXP _emDyNAM_stepAugment(SEXP seqSEXP, SEXP tieNamesSEXP, SEXP gammaEplusSEXP, SEXP gammaPlusSEXP, SEXP mSEXP, SEXP meSEXP, SEXP net0SEXP, SEXP pAugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type tieNames(tieNamesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gammaEplus(gammaEplusSEXP);
    Rcpp::traits::input_parameter< double >::type gammaPlus(gammaPlusSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type me(meSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type net0(net0SEXP);
    Rcpp::traits::input_parameter< double >::type pAug(pAugSEXP);
    rcpp_result_gen = Rcpp::wrap(stepAugment(seq, tieNames, gammaEplus, gammaPlus, m, me, net0, pAug));
    return rcpp_result_gen;
END_RCPP
}
// stepShort
List stepShort(DataFrame seq, CharacterVector tieNames, NumericMatrix gammaEminus, double gammaMinus, double m, NumericMatrix me, NumericMatrix Kel_g1, DataFrame auxDf, double pShort);
RcppExport SEXP _emDyNAM_stepShort(SEXP seqSEXP, SEXP tieNamesSEXP, SEXP gammaEminusSEXP, SEXP gammaMinusSEXP, SEXP mSEXP, SEXP meSEXP, SEXP Kel_g1SEXP, SEXP auxDfSEXP, SEXP pShortSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type tieNames(tieNamesSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type gammaEminus(gammaEminusSEXP);
    Rcpp::traits::input_parameter< double >::type gammaMinus(gammaMinusSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type me(meSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Kel_g1(Kel_g1SEXP);
    Rcpp::traits::input_parameter< DataFrame >::type auxDf(auxDfSEXP);
    Rcpp::traits::input_parameter< double >::type pShort(pShortSEXP);
    rcpp_result_gen = Rcpp::wrap(stepShort(seq, tieNames, gammaEminus, gammaMinus, m, me, Kel_g1, auxDf, pShort));
    return rcpp_result_gen;
END_RCPP
}
// stepPerm
List stepPerm(DataFrame seq, CharacterVector tieNames, double m, NumericMatrix me);
RcppExport SEXP _emDyNAM_stepPerm(SEXP seqSEXP, SEXP tieNamesSEXP, SEXP mSEXP, SEXP meSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type tieNames(tieNamesSEXP);
    Rcpp::traits::input_parameter< double >::type m(mSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type me(meSEXP);
    rcpp_result_gen = Rcpp::wrap(stepPerm(seq, tieNames, m, me));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_emDyNAM_timesTwo", (DL_FUNC) &_emDyNAM_timesTwo, 1},
    {"_emDyNAM_getpDoAugment", (DL_FUNC) &_emDyNAM_getpDoAugment, 10},
    {"_emDyNAM_getpDoShort", (DL_FUNC) &_emDyNAM_getpDoShort, 8},
    {"_emDyNAM_getpDoPerm", (DL_FUNC) &_emDyNAM_getpDoPerm, 9},
    {"_emDyNAM_getKelMeMatrix", (DL_FUNC) &_emDyNAM_getKelMeMatrix, 2},
    {"_emDyNAM_getAuxDfE", (DL_FUNC) &_emDyNAM_getAuxDfE, 3},
    {"_emDyNAM_stepAugment", (DL_FUNC) &_emDyNAM_stepAugment, 8},
    {"_emDyNAM_stepShort", (DL_FUNC) &_emDyNAM_stepShort, 9},
    {"_emDyNAM_stepPerm", (DL_FUNC) &_emDyNAM_stepPerm, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_emDyNAM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
